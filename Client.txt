#define _CRT_SECURE_NO_WARNINGS
#include <fstream>
#include <iostream>
#include <ctime>
#include <windows.h>
#include <mutex>
#include <winsock.h>
#include <stdio.h>
#include <conio.h>
#include <sstream>
#include <string.h>
#include <process.h>
#include <c:\Users\егор\Desktop\pthread.h>
#pragma comment(lib, "pthreadVC2.lib") 

#pragma comment (lib, "ws2_32.lib")



BOOL WINAPI SetConsoleTitle(__in LPCTSTR lpConsoleTitle);
boolean leaving(false);
boolean messaging(false);
char username[25]("");



using  std::cout;
using  std::cin;
using  std::endl;
SOCKET Connect;
CONSOLE_SCREEN_BUFFER_INFO csbi;
void getWord(char *mas);

HWND hwnd = GetConsoleWindow();


DWORD dwExStyle = ::GetWindowLong(hwnd, GWL_EXSTYLE);
using namespace std;
char  *key = new char[30];
string mas[1000];

#pragma once


#include "md5.h"

/* system implementation headers */
#include <cstdio>


// Constants for MD5Transform routine.
#define S11 7
#define S12 12
#define S13 17
#define S14 22
#define S21 5
#define S22 9
#define S23 14
#define S24 20
#define S31 4
#define S32 11
#define S33 16
#define S34 23
#define S41 6
#define S42 10
#define S43 15
#define S44 21

///////////////////////////////////////////////

// F, G, H and I are basic MD5 functions.
inline MD5::uint4 MD5::F(uint4 x, uint4 y, uint4 z) {
	return x & y | ~x&z;
}

inline MD5::uint4 MD5::G(uint4 x, uint4 y, uint4 z) {
	return x & z | y & ~z;
}

inline MD5::uint4 MD5::H(uint4 x, uint4 y, uint4 z) {
	return x ^ y^z;
}

inline MD5::uint4 MD5::I(uint4 x, uint4 y, uint4 z) {
	return y ^ (x | ~z);
}

// rotate_left rotates x left n bits.
inline MD5::uint4 MD5::rotate_left(uint4 x, int n) {
	return (x << n) | (x >> (32 - n));
}

// FF, GG, HH, and II transformations for rounds 1, 2, 3, and 4.
// Rotation is separate from addition to prevent recomputation.
inline void MD5::FF(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac) {
	a = rotate_left(a + F(b, c, d) + x + ac, s) + b;
}

inline void MD5::GG(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac) {
	a = rotate_left(a + G(b, c, d) + x + ac, s) + b;
}

inline void MD5::HH(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac) {
	a = rotate_left(a + H(b, c, d) + x + ac, s) + b;
}

inline void MD5::II(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac) {
	a = rotate_left(a + I(b, c, d) + x + ac, s) + b;
}

//////////////////////////////////////////////

// default ctor, just initailize
MD5::MD5()
{
	init();
}

//////////////////////////////////////////////

// nifty shortcut ctor, compute MD5 for string and finalize it right away
MD5::MD5(const std::string &text)
{
	init();
	update(text.c_str(), text.length());
	finalize();
}

//////////////////////////////

void MD5::init()
{
	finalized = false;

	count[0] = 0;
	count[1] = 0;

	// load magic initialization constants.
	state[0] = 0x67452301;
	state[1] = 0xefcdab89;
	state[2] = 0x98badcfe;
	state[3] = 0x10325476;
}

//////////////////////////////

// decodes input (unsigned char) into output (uint4). Assumes len is a multiple of 4.
void MD5::decode(uint4 output[], const uint1 input[], size_type len)
{
	for (unsigned int i = 0, j = 0; j < len; i++, j += 4)
		output[i] = ((uint4)input[j]) | (((uint4)input[j + 1]) << 8) |
		(((uint4)input[j + 2]) << 16) | (((uint4)input[j + 3]) << 24);
}

//////////////////////////////

// encodes input (uint4) into output (unsigned char). Assumes len is
// a multiple of 4.
void MD5::encode(uint1 output[], const uint4 input[], size_type len)
{
	for (size_type i = 0, j = 0; j < len; i++, j += 4) {
		output[j] = input[i] & 0xff;
		output[j + 1] = (input[i] >> 8) & 0xff;
		output[j + 2] = (input[i] >> 16) & 0xff;
		output[j + 3] = (input[i] >> 24) & 0xff;
	}
}

//////////////////////////////

// apply MD5 algo on a block
void MD5::transform(const uint1 block[blocksize])
{
	uint4 a = state[0], b = state[1], c = state[2], d = state[3], x[16];
	decode(x, block, blocksize);

	/* Round 1 */
	FF(a, b, c, d, x[0], S11, 0xd76aa478); /* 1 */
	FF(d, a, b, c, x[1], S12, 0xe8c7b756); /* 2 */
	FF(c, d, a, b, x[2], S13, 0x242070db); /* 3 */
	FF(b, c, d, a, x[3], S14, 0xc1bdceee); /* 4 */
	FF(a, b, c, d, x[4], S11, 0xf57c0faf); /* 5 */
	FF(d, a, b, c, x[5], S12, 0x4787c62a); /* 6 */
	FF(c, d, a, b, x[6], S13, 0xa8304613); /* 7 */
	FF(b, c, d, a, x[7], S14, 0xfd469501); /* 8 */
	FF(a, b, c, d, x[8], S11, 0x698098d8); /* 9 */
	FF(d, a, b, c, x[9], S12, 0x8b44f7af); /* 10 */
	FF(c, d, a, b, x[10], S13, 0xffff5bb1); /* 11 */
	FF(b, c, d, a, x[11], S14, 0x895cd7be); /* 12 */
	FF(a, b, c, d, x[12], S11, 0x6b901122); /* 13 */
	FF(d, a, b, c, x[13], S12, 0xfd987193); /* 14 */
	FF(c, d, a, b, x[14], S13, 0xa679438e); /* 15 */
	FF(b, c, d, a, x[15], S14, 0x49b40821); /* 16 */

											/* Round 2 */
	GG(a, b, c, d, x[1], S21, 0xf61e2562); /* 17 */
	GG(d, a, b, c, x[6], S22, 0xc040b340); /* 18 */
	GG(c, d, a, b, x[11], S23, 0x265e5a51); /* 19 */
	GG(b, c, d, a, x[0], S24, 0xe9b6c7aa); /* 20 */
	GG(a, b, c, d, x[5], S21, 0xd62f105d); /* 21 */
	GG(d, a, b, c, x[10], S22, 0x2441453); /* 22 */
	GG(c, d, a, b, x[15], S23, 0xd8a1e681); /* 23 */
	GG(b, c, d, a, x[4], S24, 0xe7d3fbc8); /* 24 */
	GG(a, b, c, d, x[9], S21, 0x21e1cde6); /* 25 */
	GG(d, a, b, c, x[14], S22, 0xc33707d6); /* 26 */
	GG(c, d, a, b, x[3], S23, 0xf4d50d87); /* 27 */
	GG(b, c, d, a, x[8], S24, 0x455a14ed); /* 28 */
	GG(a, b, c, d, x[13], S21, 0xa9e3e905); /* 29 */
	GG(d, a, b, c, x[2], S22, 0xfcefa3f8); /* 30 */
	GG(c, d, a, b, x[7], S23, 0x676f02d9); /* 31 */
	GG(b, c, d, a, x[12], S24, 0x8d2a4c8a); /* 32 */

											/* Round 3 */
	HH(a, b, c, d, x[5], S31, 0xfffa3942); /* 33 */
	HH(d, a, b, c, x[8], S32, 0x8771f681); /* 34 */
	HH(c, d, a, b, x[11], S33, 0x6d9d6122); /* 35 */
	HH(b, c, d, a, x[14], S34, 0xfde5380c); /* 36 */
	HH(a, b, c, d, x[1], S31, 0xa4beea44); /* 37 */
	HH(d, a, b, c, x[4], S32, 0x4bdecfa9); /* 38 */
	HH(c, d, a, b, x[7], S33, 0xf6bb4b60); /* 39 */
	HH(b, c, d, a, x[10], S34, 0xbebfbc70); /* 40 */
	HH(a, b, c, d, x[13], S31, 0x289b7ec6); /* 41 */
	HH(d, a, b, c, x[0], S32, 0xeaa127fa); /* 42 */
	HH(c, d, a, b, x[3], S33, 0xd4ef3085); /* 43 */
	HH(b, c, d, a, x[6], S34, 0x4881d05); /* 44 */
	HH(a, b, c, d, x[9], S31, 0xd9d4d039); /* 45 */
	HH(d, a, b, c, x[12], S32, 0xe6db99e5); /* 46 */
	HH(c, d, a, b, x[15], S33, 0x1fa27cf8); /* 47 */
	HH(b, c, d, a, x[2], S34, 0xc4ac5665); /* 48 */

										   /* Round 4 */
	II(a, b, c, d, x[0], S41, 0xf4292244); /* 49 */
	II(d, a, b, c, x[7], S42, 0x432aff97); /* 50 */
	II(c, d, a, b, x[14], S43, 0xab9423a7); /* 51 */
	II(b, c, d, a, x[5], S44, 0xfc93a039); /* 52 */
	II(a, b, c, d, x[12], S41, 0x655b59c3); /* 53 */
	II(d, a, b, c, x[3], S42, 0x8f0ccc92); /* 54 */
	II(c, d, a, b, x[10], S43, 0xffeff47d); /* 55 */
	II(b, c, d, a, x[1], S44, 0x85845dd1); /* 56 */
	II(a, b, c, d, x[8], S41, 0x6fa87e4f); /* 57 */
	II(d, a, b, c, x[15], S42, 0xfe2ce6e0); /* 58 */
	II(c, d, a, b, x[6], S43, 0xa3014314); /* 59 */
	II(b, c, d, a, x[13], S44, 0x4e0811a1); /* 60 */
	II(a, b, c, d, x[4], S41, 0xf7537e82); /* 61 */
	II(d, a, b, c, x[11], S42, 0xbd3af235); /* 62 */
	II(c, d, a, b, x[2], S43, 0x2ad7d2bb); /* 63 */
	II(b, c, d, a, x[9], S44, 0xeb86d391); /* 64 */

	state[0] += a;
	state[1] += b;
	state[2] += c;
	state[3] += d;

	// Zeroize sensitive information.
	memset(x, 0, sizeof x);
}

//////////////////////////////

// MD5 block update operation. Continues an MD5 message-digest
// operation, processing another message block
void MD5::update(const unsigned char input[], size_type length)
{
	// compute number of bytes mod 64
	size_type index = count[0] / 8 % blocksize;

	// Update number of bits
	if ((count[0] += (length << 3)) < (length << 3))
		count[1]++;
	count[1] += (length >> 29);

	// number of bytes we need to fill in buffer
	size_type firstpart = 64 - index;

	size_type i;

	// transform as many times as possible.
	if (length >= firstpart)
	{
		// fill buffer first, transform
		memcpy(&buffer[index], input, firstpart);
		transform(buffer);

		// transform chunks of blocksize (64 bytes)
		for (i = firstpart; i + blocksize <= length; i += blocksize)
			transform(&input[i]);

		index = 0;
	}
	else
		i = 0;

	// buffer remaining input
	memcpy(&buffer[index], &input[i], length - i);
}

//////////////////////////////

// for convenience provide a verson with signed char
void MD5::update(const char input[], size_type length)
{
	update((const unsigned char*)input, length);
}

//////////////////////////////

// MD5 finalization. Ends an MD5 message-digest operation, writing the
// the message digest and zeroizing the context.
MD5& MD5::finalize()
{
	static unsigned char padding[64] = {
		0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	};

	if (!finalized) {
		// Save number of bits
		unsigned char bits[8];
		encode(bits, count, 8);

		// pad out to 56 mod 64.
		size_type index = count[0] / 8 % 64;
		size_type padLen = (index < 56) ? (56 - index) : (120 - index);
		update(padding, padLen);

		// Append length (before padding)
		update(bits, 8);

		// Store state in digest
		encode(digest, state, 16);

		// Zeroize sensitive information.
		memset(buffer, 0, sizeof buffer);
		memset(count, 0, sizeof count);

		finalized = true;
	}

	return *this;
}

//////////////////////////////

// return hex representation of digest as string
std::string MD5::hexdigest() const
{
	if (!finalized)
		return "";

	char buf[33];
	for (int i = 0; i<16; i++)
		sprintf(buf + i * 2, "%02x", digest[i]);
	buf[32] = 0;

	return std::string(buf);
}

//////////////////////////////

std::ostream& operator<<(std::ostream& out, MD5 md5)
{
	return out << md5.hexdigest();
}

//////////////////////////////

std::string md5(const std::string str)
{
	MD5 md5 = MD5(str);

	return md5.hexdigest();
}



void Present()
{
#ifdef _WIN64

	PINT64 pProcHeap = (PINT64)(__readgsqword(0x60) + 0x30);   
		PUINT32 pFlags = (PUINT32)(*pProcHeap + 0x70);     
		PUINT32 pForceFlags = (PUINT32)(*pProcHeap + 0x74);     



#endif

	if (*pFlags & ~HEAP_GROWABLE || *pForceFlags != 0)
	{
		closesocket(Connect);
		WSACleanup();
		exit;
	}
	HANDLE hMyMutex = CreateMutex(NULL, FALSE, ("MyMutex"));

	SetHandleInformation(hMyMutex, HANDLE_FLAG_PROTECT_FROM_CLOSE, HANDLE_FLAG_PROTECT_FROM_CLOSE);


	__try {
		CloseHandle(hMyMutex);
	}

	__except (HANDLE_FLAG_PROTECT_FROM_CLOSE) {
		closesocket(Connect);
		WSACleanup();
		exit;
	}
	
		if (IsDebuggerPresent())
		{
			closesocket(Connect);
			WSACleanup();
			exit;
		}



		BOOL IsDebgPresent = FALSE;
		CheckRemoteDebuggerPresent(GetCurrentProcess(), &IsDebgPresent);
		if (IsDebgPresent)
		{
			closesocket(Connect);
			WSACleanup();
			exit;
		}


		char IsDbgPresent = 0;


		if (IsDbgPresent)
		{
			closesocket(Connect);
			WSACleanup();
			exit;
		}

		unsigned long NtGlobalFlags = 0;



		if (NtGlobalFlags & 0x70)

		{
			closesocket(Connect);
			WSACleanup();
			exit;
		}
		else
		{
			char BufferOver[256];
			GetModuleFileName(NULL, BufferOver, sizeof(BufferOver));

			
			typedef unsigned long(__stdcall *pfnNtQueryInformationProcess)(IN  HANDLE,
				IN  unsigned int, OUT PVOID, IN ULONG, OUT PULONG);

	
			const int ProcessDbgPort = 7;

			
			pfnNtQueryInformationProcess NtQueryInfoProcess = NULL;

	
			unsigned long Ret = 0;
			unsigned long IsRemotePresent = 0;

			HMODULE hNtDll = LoadLibrary("ntdll.dll");
			if (hNtDll == NULL)
			{
				exit;
			}

			NtQueryInfoProcess = (pfnNtQueryInformationProcess)
				GetProcAddress(hNtDll, "NtQueryInformationProcess");
			if (NtQueryInfoProcess == NULL)
			{
				exit;
			}

	
			Ret = NtQueryInfoProcess(GetCurrentProcess(), ProcessDbgPort,
				&IsRemotePresent, sizeof(unsigned long), NULL);

			
			if (Ret == 0x00000000 && IsRemotePresent != 0)
			{

				exit;

			}
		
	}
	
	
		
}

void Authorisator()
{
	while(true)
	Present();
}

void ChecktheSize()
{
	for (;; Sleep(5)) {
		FILE *pFile = fopen("Client.exe", "rb");
		long nFileLen = 0;
		if (pFile)
		{
			fseek(pFile, 0, SEEK_END);
			nFileLen = ftell(pFile);
			fclose(pFile);
		}


		
		std::string s;
		std::stringstream out;
		out << nFileLen;
		s = out.str();


		

		if (md5(s) != md5("49664")) {
			closesocket(Connect);
			WSACleanup();
			exit;
		}


	}
}


void Sender()
{

	const char *_aspda_ = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
	int symb = 0;


	for (int i = 0; i < 25; i++)
	{

		symb = rand() % 36;

		key[i] = _aspda_[symb];

	}
	for (int i = 0; i < 25; i++)
	{
		symb = rand() % 36;
		key[i] = _aspda_[symb];

	}



	for (int i = 0; i < 25; i++)
	{

		symb = rand() % 36;
		key[i] = _aspda_[symb];

	}
	for (int i = 25; i < 30; i++)
	{

		symb = rand() % 36;
		key[i] = _aspda_[symb];

	}
	key[29] = '\0';




}
int rotate(int xcomp)
{
	return (int)(xcomp * log2(xcomp));
}
void Sendermk2()
{
	int symb = 0;
	int xcompofkey, ycompofkey = 0;
	char *keyx = new char[25];
	for (;; Sleep(60))
	{
		for (int i = 0; i < 25; i++)
		{
			symb = rand() % 36;
			xcompofkey = (int)(symb / log2(symb + 2));
			ycompofkey = (int)rotate(xcompofkey);
			symb = ycompofkey + xcompofkey;
			if (!((symb >= 48) && (symb <= 57) && (symb >= 65) && (symb <= 90)))
				symb = rand() % 90 + 65;
			keyx[i] = (char)symb;
			key[25] = keyx[i];
			if (i>0)
				key[26] = keyx[i - 1];
			if (i>1)
				key[27] = keyx[i - 2];
			if (i>2)
				key[28] = keyx[i - 3];

		}
		key[29] = '\0';


	}


}
void RecvToClient()
{


	

	//char *buffer = new char[1024];
	char *buffer = new char[1024];

	for (;; Sleep(75))
		

	{

		
		if (leaving == false) {



			memset(buffer, 0, sizeof(buffer));
			if (recv(Connect, buffer, 1024, NULL))
			{
				if ((strcmp(buffer, "\\exit") == 0) && (leaving == false)) {

					leaving = true;

				}
				if (leaving == false) {


					if ((strlen(buffer) != 0))
					{
						printf("%s", buffer);
						printf("\n");
					}
					
					

				}
			}





		}

	}
}




int main(int argc, char* argv[])
{
	CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)Authorisator, NULL, NULL, NULL);
	int mark = 0;
	char *msg = new char(100);
	char *mesg = new char(100);
	for (int i = 0; i < 1000; i++)
		mas[i] = "";
	const char *alphab = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

	CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)Sendermk2, NULL, NULL, NULL);
	FILE *pFile = fopen("Client.exe", "rb");
	long nFileLen = 0;
	if (pFile)
	{
		fseek(pFile, 0, SEEK_END);
		nFileLen = ftell(pFile);
		fclose(pFile);
	}

	

	std::string s;
	std::stringstream out;
	out << nFileLen;
	s = out.str();

	

	

	

	if (md5(s) == md5("49664")) {

		system("chcp < nul 1251");
		cout << "Вас приветствует чат. Войдите " << endl;
		char *k = new char[25];

		char *sp = new char[6];

		char *xp = new char[6];

		char *gp = new char[36];

		

		ifstream chec;
		chec.open("license.txt");

		char *flag = new char[255];

		flag[0] = ' ';

		chec >> flag;

		cout << endl;
		

		cout << "Your nickname?" << endl;
		//	char *answer = new char[99];
		while (strlen(username)<2)
			cin >> username;
		int repeats;
		int repeats_x;
		int marker = 0;
		char generc[256] = { 0 };
		if (chec.is_open())
		{

			
			chec >> repeats;
			if (repeats < 0)
			{
				cout << "File error" << endl;
				chec.close();
				Sleep(1000);
				return 0;
			}
			srand((int)repeats);
			chec.close();
		
			
			Sender();
			key[29] = '\0';
			
			if (repeats >= 145)
				repeats_x = 127 + (int)(repeats % 5)+3;
			for (int i = 0; i < ((int)(repeats_x-125)); i++)
			{
				
				for (int i = 0; i < 30; i++)
				{
					key[i] = '\0';
				}

				key[29] = '\0';
				Sender();
			}

			for (int i = 0; i<5; i++)
				sp[i] = alphab[rand() % 36 + 0];
			sp[5] = '\0';

			for (int i = 0; i<5; i++)
				xp[i] = key[rand() % 24 + 0];
			xp[5] = '\0';

			k = flag;

			
			for (int i = 0; i < 35; i++)
			{

				if (i < 5)
				{
					gp[i] = xp[4 - i];
					if (gp[i] == k[i])
						marker++;
					else
						marker = 0;
				}
					

				if ((i > 4) && (i < 30))
				{
					gp[i] = key[i - 5];
					if (gp[i] == k[i])
						marker++;
					else
						marker = 0;
				}
			

				if (i > 29)

				{
                
					gp[i] = sp[34 - i];
					if (gp[i] == k[i])
						marker++;
					else
						marker = 0;
				}

			}
			    
			gp[35] = '\0';
		
			
			
			if (marker<strlen(gp))
				return 0;
			
			
			for (int i = 0; i < strlen(gp); i++)
			{
				int diff = (unsigned int)(gp[i]);
				gp[i] = (unsigned char)((unsigned int)gp[i] + rand() % (strlen(gp) - 1));

				k[i] = (unsigned char)((unsigned int)(k[i] + (unsigned int)(gp[i] - diff)));
			}
			
		
		}
		else {

			cout << "No file" << endl;
		
			chec.close();
			Sleep(1000);
			return 0;

		}





		if ((md5(marker+gp)==md5(strlen(k)+gp))) {
			
			cout << "Client: " << endl;
			char accepter[] = " ";
			char ip[15];

			u_short port;



			char ch2[] = "-";
			//  char message[MAX_PATH];

				cout << "IP: ";
			cin >> ip;

			
			cout << "Port: ";
			cin >> port;
			cout << endl;
			
			
					for (int i = 0; i < strlen(username); i++)
					{
						if ((username[i] == ' ') || (username[i] == '\n') || (username[i] == '\r') || (username[i] == '\t'))
							strcpy(username, " ");
					}
				
			char message[MAX_PATH];

			WSAData wsa;
			WORD Version = MAKEWORD(2, 1);

			WSAStartup(Version, &wsa);

			if (WSAStartup(Version, &wsa) != 0)
			{

				cout << "Can't load WSA library." << endl;

			}
			else
			{

				cout << "WSA library load completed" << endl;

			}

			Connect = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);

			if (Connect == SOCKET_ERROR)
			{

				cout << "Socket creation error" << endl;

			}
			else
			{

				cout << "Socket created" << endl;

			}

			SOCKADDR_IN Client;

			Client.sin_family = AF_INET;
			Client.sin_port = htons(port);
			Client.sin_addr.s_addr = inet_addr(ip);

			while (leaving == false) // !!!
			{

				if (connect(Connect, (SOCKADDR*)&Client, sizeof(Client)))
				{
					
					const char *prt1 = "@keycode_";
					for (int i = 0; i < strlen(prt1); i++)
					{
						msg[i] = prt1[i];
					}
			
					for (int i = strlen(prt1); i <strlen(prt1) + strlen(k); i++)
					{
						msg[i]=k[i - strlen(prt1)];
						
					}
					msg[strlen(prt1) + strlen(k)] = '_';
					int itr = 0;
					int itrm = 0;
					if (repeats > 256)
					{
						itr = (int)(repeats / 256);
						repeats = (int)(repeats % 256);
						itrm = (int)(itr / 256);
						itr = (int)(itr % 256);
					}
						
					
					msg[strlen(prt1) + strlen(k) + 1] =(unsigned char)(repeats+35);
				
					msg[strlen(prt1) + strlen(k) + 2] = (unsigned char)(itr+35);
					msg[strlen(prt1) + strlen(k) + 3] = (unsigned char)(itrm + 35);
					msg[strlen(prt1) + strlen(k) + 4] = '\0';
					
				
					
					
					send(Connect, msg, MAX_PATH, NULL);
					
					
					recv(Connect, message, MAX_PATH, NULL);
					
				
					if (strlen(message) > 255)
					{
						strcpy(message, "ERROR! If you see this server respond message, then you failed to connect to server. Check if server is running or ip and port match the server's\nPRESS ANY KEY TO CLOSE APPLICATION!");
						cout << "Server respond: " << message << endl;
						_getch();
						return 0;
					}
					else
					{
						cout << "Notice: Message size if limited by 256 symbols" << endl;

						cout << "Server respond: " << message << endl;
						
					}
				
					
						
					//CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)RecvToClient, NULL, NULL, NULL);
					CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)RecvToClient, NULL, NULL, NULL);
					CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)ChecktheSize, NULL, NULL, NULL);
					
					

					strcpy(message, "");
					
					
					
					break;

				}

			}

		
			if (leaving == false) {
				

				ZeroMemory(message, sizeof(message));
			}
			while (leaving == false)
			{
				
				
				getWord(message);


				
				if (leaving == false)
				{

					if ((strlen(message) > 0)&&(strlen(message)<256)) {

						strcpy(accepter, msg);
						strcat(accepter, username);
						strcat(accepter, " : ");
						strcat(accepter, message);

						
						send(Connect, accepter, strlen(accepter), 0);

						ZeroMemory(message, sizeof(message));
						ZeroMemory(accepter, sizeof(accepter));



					}
					else if (strlen(message) >= 256)
					{
						cout << "Некорректная длина сообщения" << endl;
						ZeroMemory(message, sizeof(message));
						ZeroMemory(accepter, sizeof(accepter));

					}




				}
			}
			if (leaving == true) {
				ZeroMemory(ip, sizeof(ip));
				closesocket(Connect);
				WSACleanup();
				return 0;
			}


		}
		else
		{
			
			return 0;
		}
	}
	else
	{
		return 0;
	}
}

void getWord(char *mas)
{



	if (leaving == false) {

		char lastsymb;
		int truelength = 0;
		boolean message_begins = false;
		int c;


		for (int i = 0; (c = getchar()) != EOF && c != '\n'; ++i)
		{

			if (message_begins == false)
			{
				if (c != (unsigned int)(unsigned char)(' '))
					message_begins = true;
			}
			if (message_begins == true)
			{
				lastsymb = (unsigned char)c;
				if (truelength > 0)
				{


					if ((lastsymb == ' ') && (mas[truelength] == lastsymb))
						lastsymb = c;
					else
					{
						mas[truelength] = (unsigned char)c;
						truelength++;
					}
				}
				else
				{
					mas[truelength] = (unsigned char)c;
					truelength++;




				}

			}


		}
	}

}